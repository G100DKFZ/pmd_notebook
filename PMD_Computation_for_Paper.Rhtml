<html>

<head>
<title>PMD Computation for TCR_COMPARISON</title>
</head>
<body>
<!--begin.rcode echo=FALSE
## Function "dataTransformation" By default use 1,2,4 columns as Primary key.
## Final Matrix can be used in any function of inseqDiv package

dataTransformation<-function(data,ISrange=c(1,2,4),factorRange=c(12,13,14),thr=3,sub,fraction){
    # Check if the user asked for subsampling
    # Disabled in this notebbok
    if (sub==TRUE) {
      data<-data
      print(length(data[,3]<3))
    }
    # Sort data by (column1,2)
    sortdata<-data[order(as.numeric(data[,1]),as.numeric(data[,2]),na.last=NA),]
    mat<-sortdata[,1:3]
    # substitute the original TCR list with the collapsed
    sortdata[,1:3]<-as.data.frame(mat)
    CollapseData<-sortdata
    # construct names with colums in ISrange
    IS_vec<-do.call(paste, c(CollapseData[ISrange], sep = "_"))
    # consruct factor names with colums in factorRange
    factor_vec<-do.call(paste, c(CollapseData[factorRange], sep = "_"))
    # Extract the reads count
    numberOfread_vec<-CollapseData[,3]
    # construct the datamatrix
    dataMatrix<-cbind(factor_vec,IS_vec,numberOfread_vec)
    dataMatrix<-transform(dataMatrix, numberOfread_vec = as.numeric(as.character((numberOfread_vec))))
    # transform into dataframe (redundant with the operation before?)
    dataMatrix<-as.data.frame(dataMatrix)
    # abundance == numberOfread_vec. Refactorize
    abundance <- as.numeric(dataMatrix[,3])
    # initiaize a dataframe with as many rows as the total number of reads
    temp<- data.frame(rep(NA, sum(abundance)))
    # for each element repeat its name as many time as is his abbundance (each name is a level)
    for (i in 1:(ncol(dataMatrix)-1)) {
            temp[,i] <- rep(as.character(dataMatrix[,i]), abundance)
        }
    
    # Construct a contingency table using levels
    finalMat<- as.data.frame.matrix(table(temp))
    finalMat<-t(finalMat)
    return(finalMat)
}
pmd <-
function(data,ISrange=c(1,2,4),factorRange=c(12,13,14),thr=3,threshold = 1.1,noNaN=TRUE,chao=FALSE,sub=FALSE,fraction=0.5){
  
  # define the arguments
  pmd <-
    list(
      data = data,ISrange = ISrange,factorRange = factorRange,thr = thr,threshold =
        threshold,noNaN = noNaN
    ) #build the object
  # instantiate the class
  class(pmd) <- "pmd"
  
  # Reformat the TCR table into a dataframe that contains as rows the
  # unique TCR and as column the factors 
  x <-dataTransformation(pmd$data,pmd$ISrange,pmd$factorRange,pmd$thr,sub,fraction)
  speciesData2 <- t(x)
  pmd$speciesData <- speciesData2
  ## calculation of the richness of species data
  pmd$shann <- shannon(x)
  pmd$simpson <- simpson(x)
  # if chao=FALSE then the richnes is computed without correction
  if (!chao) {
    for (i in 1:nrow(speciesData2)) {
      tem <- 0
      for (j in 1:ncol(speciesData2)) {
        if (speciesData2[i,j] > 0) {
          tem = tem + 1
        }
        pmd$richness[i] <- log(tem)
      }
    }
    # if chao=TRUE we use chao as abundance richness estimator
    # if the number of specie is low is possible that the chao estimator return NaN or Inf
    # chao estimator simply correct the richness on the basis of the distribution
    # of single and doubletones: Rich_corr=R_obs+{n_Single^2}\over{2 n_double}
    ######################################################
    # In this Playbook Chao correction is not impemented #
    ######################################################
  } else {
    for (i in 1:nrow(speciesData2)) {
      tem <- 0
      for (j in 1:ncol(speciesData2)) {
        if (speciesData2[i,j] > 0) {
          tem = tem + 1
        }
        pmd$richness[i] <- log(tem)
      }
    }
  }
  ## calculation of eveness of the species
  abun.vec <- rowSums(speciesData2)
  maxrow <- apply(speciesData2,1,max)
  vec.eve <- numeric(0)
  vec.eve<--log(maxrow/abun.vec)

  ## calcultion of the pmd index of the species
  pmd.index <- numeric(0)
  for (i in 1:length(pmd$richness)) {
    dist <- pmd$richness[i] - vec.eve[i]
    pmd.sup <- log2(vec.eve[i] / dist)
    pmd.index <- c(pmd.index,pmd.sup)
  }
  pmd$pmd <- pmd.index
  pmd$eveness <- vec.eve
  ## Creation of Matrix
  eulerMat <-
    matrix(
      c(pmd$richness,pmd$shann,pmd$simpson,pmd$eveness,pmd$pmd), nrow = nrow(speciesData2), ncol = 5,dimnames =
        list(
          row.names(speciesData2), c("Richness","Shannon","invSimpson","Evenness","pmdIndex")
        )
    )
  if (noNaN) {
    # removal of NaN and Inf Value 
    eulerMat <- eulerMat[!rowSums(!is.finite(eulerMat)),]
    # removal of row having richness less than adjusted threshold 
    eulerMat <- eulerMat[eulerMat[,1] > threshold,]
  }
  ## removal of row having richness less than adjusted threshold
  pmd$eulerMat <- data.frame(eulerMat)
  return(pmd)
}

pmdscatterplot <-
function(pmdres,nameofplot="",labeling=T,labelsize=4,spotRadius=4,autoScale=TRUE,x_max=10,y_max=10,onScreen=T,color=F){
  t1<-theme(
      plot.background = element_blank(),
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.border = element_blank(),
      panel.background = element_blank(),
      axis.line = element_line(size=.4)
    )
    x<-as.data.frame(pmdres)
    pmd_Index<-x[,5]

  if(color==T) myColor=x$color
  else myColor="red"
  d <- qplot(x[,1], x[,4], data=x,
               colour=myColor,
               #colour= pmd_Index,
               xlab="Richness",
               ylab="Evenness",
               main=nameofplot)
  if (autoScale==TRUE) {
    x_max=max(x[,1])
    y_max=max(x[,1])
  }
  
  if(labeling==TRUE){
    d<-d+geom_point(size=spotRadius)+t1+
    geom_abline(slope=0.5,colour="red",linetype=3) + 
    geom_abline(slope=1,colour="black",linetype=1) + 
    geom_text_repel(data = x, aes(Richness,Evenness, label = row.names(x)),
              colour="black", 
              size=labelsize) + 
    geom_abline(slope=0,colour="black",linetype=1) + 
    ylim(0,y_max) + 
    xlim(0,x_max) +theme(legend.position="none")
    if(onScreen) d
    return(d)
  }
  else{
    d<-d+geom_point(size=spotRadius)+t1+
    geom_abline(slope=0.5,colour="red",linetype=3) + 
    geom_abline(slope=1,colour="black",linetype=1) + 
    geom_abline(slope=0,colour="black",linetype=1) + 
    ylim(0,y_max) + 
    xlim(0,x_max)
    if(onScreen) d
    return(d)
  }      
}

# Add a datapoint (x) to the scatterplot (sc) 
pmdScatterAddSamples<-function(x,sc,colour="black",labelsize=4,spotRadius=4,label=F) {
  sc<-sc+geom_point(data=x,aes(Richness,Evenness), size=spotRadius,colour=colour,alpha=0.6)
  if (label) sc<-sc+geom_text_repel(data=x,aes(Richness,Evenness, label = row.names(expMat[1,])),
              colour=colour, 
              size=labelsize)
  sc
}

#Computation of Shannon entropy
shannon<-function(x,base=2) {
  shann<-numeric(ncol(x))
  for(i in 1:dim(x)[2]) {
    freq<-prop.table(t(x)[i,])
    shann[i]<--sum(freq[freq>0]*log(freq[freq>0],base))
  }
  return(shann)
}

#Computation of (inverse) Simpson Index
simpson<-function(x,index="invsimps") {
  simpson<-numeric(ncol(x))
  for(i in 1:dim(x)[2]) {
    freq<-prop.table(t(x)[i,])
    if(index=="simpson")
      simpson[i]<-sum(freq*freq)
    else
      simpson[i]<-1/sum(freq*freq)
  }
  return(simpson)
}
library(ggplot2)
library(ggrepel)
end.rcode-->


<p>The clonal analysis on four different RACE-PCR based TCR beta samples in the manuscript * Systematic comparative study of computational methods for T cell receptor sequencing data analysis * (Afzal et al.) was performed using an R package based on Polyclonal-Monoclonal Diversity (PMD) definition.<br>
In the present Rhtml document we embedded the R code sufficient to run the PMD clonal analysis on the four experimental samples described in the manuscript.
</p>
<h2>Installation</h2>
<p>Unzip the distribution file in a folder of choice (i.e. <code>~/PMD/</code>) and set in the next chunk the working directory accordingly.</p>
<code>
setwd("~/PMD/")<br>
getwd()<br>
</code>
<p>For clarity, most of the chunks are not exported. In order to export the code of a single chunk into the report set the <code>echo</code> parameter to <code>TRUE</code>. </p>
<h2> How to use the report </h2>
<p>Open the PMD_Computation_for_Paper.html in a browser to see the static version of the notebook. This version contains the instructions to use it as an R notebook. The precomputated clonal planes are embedded into the html code.</p> 
<p>The notebook is written in Rhtml and can be parsed via <a href="http://yihui.name/knitr/">Knitr</a>. We suggest to use <a href="http://www.rstudio.com/">RStudio</a> to play with the document.<br>
This code depends on two external packages, <code>ggplot2</code> and <code>ggrepel</code>. Consider to install them before to run the notebook.</p>
<h2> Input data format</h2> 
The input data format has the following fields structure
<br><br>
<code>
head(tab[tab$V5=="miTCR",])<br>
                                                       V1                V2    V3 V4    V5      V6 V7 V8<br>
12394    TGTGCCAGCAGTTTCTCGACCTGTTCGGCTAACTATGGCTACACCTTC  CASSFSTCSANYGYTF 10372  - miTCR sample2  1  1     #Jurkat Clone<br>
12395                TGTGCCAGCAGCCTTGGGACAGATACGCAGTATTTT      CASSLGTDTQYF   538  - miTCR sample2  1  1     #CEM clone<br>
                                                       V1                V2    V3 V4    V5      V6 V7 V8<br>
head(tab[tab$V5=="miXCR",])<br>                                                  
15877    TGTGCCAGCAGTTTCTCGACCTGTTCGGCTAACTATGGCTACACCTTC  CASSFSTCSANYGYTF 10044  - miXCR sample2  1  1     #Jurkat Clone<br>
15878                TGTGCCAGCAGCCTTGGGACAGATACGCAGTATTTT      CASSLGTDTQYF   533  - miXCR sample2  1  1     #CEM clone<br>
</code>
<br><br>
<p>The first column represents the "primary key" of the data. This column is different for each row. The third column must contain the reads count. All the other columns contain metadata information about the clone. We will use column 5 (analysis tool) as annotation label for the analysis. Each sample is provided as a separate table.</p>

<!--begin.rcode echo=FALSE
setwd("~/PMD/")
getwd()
expMat<-t(matrix(c(0,	0,	0,	0,	0,8.220065429,	0,	0,	2.3,	-1.273669046,8.647783,	0,	0,	3.9,	-0.796326434, 8.668074571,	0,	0,	3.9,	-0.798670134,0,	0,	0,	0,	0,8.220065429,	0,	0,	0.730856371,	-2.42011649,8.647783,	0,	0,	2.029990429,	-1.449271909,8.668074571,	0,	0,	3.845756429,	-0.812676373),nrow=5,ncol=8))
rownames(expMat)<-c("S1","S2","S3","S4","S1av","S2av","S3av","S4av")
colnames(expMat)<-c("Richness"  ,"Shannon",   "invSimpson", "Evenness" , "pmdIndex")
expMat<-as.data.frame(expMat)

### First sample
# Read the datatable
tab1<-read.table("./Data/RP_S1_allTools.default.forPMD.final.txt",header=F)
# Aggreate TCR sequeces per samples definition ($5=Analysis Tool)
res<-pmd(tab1,ISrange=c(1,2),factorRange = c(5))
d<-pmdscatterplot(res$eulerMat, labelsize=4,spotRadius=4)
# EulerMat contains 5 different diversity values (columns) for each experimental point (tools, rows)
res$eulerMat
# Add the expected clonality values into the clonal plane
pmdScatterAddSamples(expMat[c(5),],d)

### Second sample
tab2<-read.table("./Data/RP_S2_allTools.default.forPMD.final.txt",header=F)
res<-pmd(tab2,ISrange=c(1,2),factorRange = c(5))
d<-pmdscatterplot(res$eulerMat, labelsize=4,spotRadius=4)
res$eulerMat
pmdScatterAddSamples(expMat[c(6),],d)

### Third sample
tab3<-read.table("./Data/RP_S3_allTools.default.forPMD.final.txt",header=F)
res<-pmd(tab3,ISrange=c(1,2),factorRange = c(5))
d<-pmdscatterplot(res$eulerMat, labelsize=4,spotRadius=4)
res$eulerMat
pmdScatterAddSamples(expMat[c(7),],d)

### Fourth sample
tab4<-read.table("./Data/RP_S4_allTools.default.forPMD.final.txt",header=F)
res<-pmd(tab4,ISrange=c(1,2),factorRange = c(5))
d<-pmdscatterplot(res$eulerMat, labelsize=4,spotRadius=4)
res$eulerMat
pmdScatterAddSamples(expMat[c(8),],d)

end.rcode-->

<h2> Expand the analysis </h2>

<p>With the minimal amount of code provided in this notebook it is possible to extend the analysis on the provided data samples. <br>
<h3> Change the analysis attribute </h3>
The first idea is to average the output of all the tools and see the location of each sample in the clonal plane.<br>
First combine the four input dataframes
<!--begin.rcode echo=TRUE
tab<-rbind(tab1,tab2,tab3,tab4)
head(tab,1)
end.rcode-->
Then we collapse the clones on the basis of the sample column (V6)
<!--begin.rcode echo=TRUE
res<-pmd(tab,ISrange=c(1,2),factorRange = c(6))
end.rcode-->
Simply now, plot the clonal plane
<!--begin.rcode echo=TRUE
pmdscatterplot(res$eulerMat, labelsize=4,spotRadius=4)
end.rcode-->
and check the sample clonality.
<!--begin.rcode echo=TRUE
res$eulerMat
end.rcode-->
Is interesting to observe on the plane how the data points show an increasing of the clonality from sample 1 to sample 4. Note that Shannon index put more emphasis in the clonality change of the first 3 samples whereas invSimpson underline changes in the last 3 samples. On the clonal plane it's easy to catch the clonality change in all the four samples and the corresponding pmdIndex is fewer influenced in characterizing the clonality of the two extreme samples.
</p>
<h3>Combining attributes</h3>
As second example we show how to plot all the samples on the same scatterplot with different colors.<br>
First we have to combine and collapse the clones using the information on both the tools (V5) and the sample (V6)
<!--begin.rcode echo=TRUE
res<-pmd(tab,ISrange=c(1,2),factorRange = c(5,6))
end.rcode-->
The <code>pmdscatterplot()</code> function has many parameters that modify its behavior. The parameter <code>color</code>, controls the color of each single data point. If the value is set to <code>TRUE</code>, the function expects that the secondary attribute <code>color</code> is present in the primary attribute <code>eulerMat</code> declared in the input dataframe (<code>res</code> in this case). The default value of this parameter is <code>color=FALSE</code>. To construct this secondary attribute, first we extract the information from the names of the diversity matrix (<code>eulerMat</code>), and then we add back this information to the same matrix creating the attribute <code>color</code>

<!--begin.rcode echo=TRUE
colors<-strsplit(rownames(res$eulerMat),"_")
# the sample is the second element of the name list so we use tail() to select it
res$eulerMat$color<-rapply(colors, function(x) tail(x, 1)) 
end.rcode-->

Now we can plot the data notifying to the function that we want to use the color feature
<!--begin.rcode echo=TRUE
pmdscatterplot(res$eulerMat, labelsize=4,spotRadius=4,color=T)
end.rcode-->
In this case the labels can disturb the representation of the data and thus it is possible to remove them through the labeling attribute.
<!--begin.rcode echo=TRUE
pmdscatterplot(res$eulerMat, labelsize=4,spotRadius=4,color=T, labeling=F)
end.rcode-->
</p>
<h3> License </h3>
<code>
This notebook is free software: you can redistribute it and/or modify<br>
it under the terms of the GNU General Public License as published by<br>
the Free Software Foundation, either version 3 of the License, or<br>
(at your option) any later version.<br>
<br>
This program is distributed in the hope that it will be useful,<br>
but WITHOUT ANY WARRANTY; without even the implied warranty of<br>
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br>
GNU General Public License for more details.<br>
<br>
You should have received a copy of the GNU General Public License<br>
along with this program.  If not, see <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>.
<code>
</body>
</html>
